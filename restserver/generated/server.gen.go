// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns the health status of the server
	// (GET /api/health)
	GetHealth(ctx echo.Context) error
	// Delete a project by id.
	// (DELETE /api/project/{projectName})
	DeleteProject(ctx echo.Context, projectName string) error
	// Returns a single project by id.
	// (GET /api/project/{projectName})
	GetProject(ctx echo.Context, projectName string) error
	// Check if a project name is taken.
	// (HEAD /api/project/{projectName})
	ProjectExists(ctx echo.Context, projectName string) error
	// Delete a project hash.
	// (DELETE /api/project/{projectName}/artifact/{artifactId})
	DeleteProjectArtifact(ctx echo.Context, projectName string, artifactId string) error
	// Get a project hash under a project id.
	// (GET /api/project/{projectName}/artifact/{artifactId})
	GetProjectArtifact(ctx echo.Context, projectName string, artifactId string) error
	// Returns 200 with Bob-Exists header.
	// (HEAD /api/project/{projectName}/artifact/{artifactId})
	ProjectArtifactExists(ctx echo.Context, projectName string, artifactId string) error

	// (GET /api/project/{projectName}/artifacts)
	GetProjectArtifacts(ctx echo.Context, projectName string) error
	// Upload a artifact and assign it to a project.
	// (POST /api/project/{projectName}/artifacts)
	UploadArtifact(ctx echo.Context, projectName string) error
	// Returns a list of projects.
	// (GET /api/projects)
	GetProjects(ctx echo.Context) error
	// Create a new project.
	// (POST /api/projects)
	CreateProject(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProject(ctx, projectName)
	return err
}

// GetProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProject(ctx, projectName)
	return err
}

// ProjectExists converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectExists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProjectExists(ctx, projectName)
	return err
}

// DeleteProjectArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// ------------- Path parameter "artifactId" -------------
	var artifactId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifactId", runtime.ParamLocationPath, ctx.Param("artifactId"), &artifactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProjectArtifact(ctx, projectName, artifactId)
	return err
}

// GetProjectArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// ------------- Path parameter "artifactId" -------------
	var artifactId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifactId", runtime.ParamLocationPath, ctx.Param("artifactId"), &artifactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjectArtifact(ctx, projectName, artifactId)
	return err
}

// ProjectArtifactExists converts echo context to params.
func (w *ServerInterfaceWrapper) ProjectArtifactExists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// ------------- Path parameter "artifactId" -------------
	var artifactId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "artifactId", runtime.ParamLocationPath, ctx.Param("artifactId"), &artifactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artifactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProjectArtifactExists(ctx, projectName, artifactId)
	return err
}

// GetProjectArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectArtifacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjectArtifacts(ctx, projectName)
	return err
}

// UploadArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) UploadArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectName", runtime.ParamLocationPath, ctx.Param("projectName"), &projectName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadArtifact(ctx, projectName)
	return err
}

// GetProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjects(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProjects(ctx)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProject(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/health", wrapper.GetHealth)
	router.DELETE(baseURL+"/api/project/:projectName", wrapper.DeleteProject)
	router.GET(baseURL+"/api/project/:projectName", wrapper.GetProject)
	router.HEAD(baseURL+"/api/project/:projectName", wrapper.ProjectExists)
	router.DELETE(baseURL+"/api/project/:projectName/artifact/:artifactId", wrapper.DeleteProjectArtifact)
	router.GET(baseURL+"/api/project/:projectName/artifact/:artifactId", wrapper.GetProjectArtifact)
	router.HEAD(baseURL+"/api/project/:projectName/artifact/:artifactId", wrapper.ProjectArtifactExists)
	router.GET(baseURL+"/api/project/:projectName/artifacts", wrapper.GetProjectArtifacts)
	router.POST(baseURL+"/api/project/:projectName/artifacts", wrapper.UploadArtifact)
	router.GET(baseURL+"/api/projects", wrapper.GetProjects)
	router.POST(baseURL+"/api/projects", wrapper.CreateProject)

}

